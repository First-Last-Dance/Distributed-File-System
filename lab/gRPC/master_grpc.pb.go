// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.0
// source: gRPC/master.proto

package gRPC

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DownloadService_Download_FullMethodName = "/master.DownloadService/Download"
)

// DownloadServiceClient is the client API for DownloadService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DownloadServiceClient interface {
	Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (*DownloadResponse, error)
}

type downloadServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDownloadServiceClient(cc grpc.ClientConnInterface) DownloadServiceClient {
	return &downloadServiceClient{cc}
}

func (c *downloadServiceClient) Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (*DownloadResponse, error) {
	out := new(DownloadResponse)
	err := c.cc.Invoke(ctx, DownloadService_Download_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DownloadServiceServer is the server API for DownloadService service.
// All implementations must embed UnimplementedDownloadServiceServer
// for forward compatibility
type DownloadServiceServer interface {
	Download(context.Context, *DownloadRequest) (*DownloadResponse, error)
	mustEmbedUnimplementedDownloadServiceServer()
}

// UnimplementedDownloadServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDownloadServiceServer struct {
}

func (UnimplementedDownloadServiceServer) Download(context.Context, *DownloadRequest) (*DownloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (UnimplementedDownloadServiceServer) mustEmbedUnimplementedDownloadServiceServer() {}

// UnsafeDownloadServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DownloadServiceServer will
// result in compilation errors.
type UnsafeDownloadServiceServer interface {
	mustEmbedUnimplementedDownloadServiceServer()
}

func RegisterDownloadServiceServer(s grpc.ServiceRegistrar, srv DownloadServiceServer) {
	s.RegisterService(&DownloadService_ServiceDesc, srv)
}

func _DownloadService_Download_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DownloadServiceServer).Download(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DownloadService_Download_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DownloadServiceServer).Download(ctx, req.(*DownloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DownloadService_ServiceDesc is the grpc.ServiceDesc for DownloadService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DownloadService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "master.DownloadService",
	HandlerType: (*DownloadServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Download",
			Handler:    _DownloadService_Download_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gRPC/master.proto",
}

const (
	UploadService_Upload_FullMethodName = "/master.UploadService/Upload"
)

// UploadServiceClient is the client API for UploadService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UploadServiceClient interface {
	Upload(ctx context.Context, in *UploadRequest, opts ...grpc.CallOption) (*UploadResponse, error)
}

type uploadServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUploadServiceClient(cc grpc.ClientConnInterface) UploadServiceClient {
	return &uploadServiceClient{cc}
}

func (c *uploadServiceClient) Upload(ctx context.Context, in *UploadRequest, opts ...grpc.CallOption) (*UploadResponse, error) {
	out := new(UploadResponse)
	err := c.cc.Invoke(ctx, UploadService_Upload_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UploadServiceServer is the server API for UploadService service.
// All implementations must embed UnimplementedUploadServiceServer
// for forward compatibility
type UploadServiceServer interface {
	Upload(context.Context, *UploadRequest) (*UploadResponse, error)
	mustEmbedUnimplementedUploadServiceServer()
}

// UnimplementedUploadServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUploadServiceServer struct {
}

func (UnimplementedUploadServiceServer) Upload(context.Context, *UploadRequest) (*UploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedUploadServiceServer) mustEmbedUnimplementedUploadServiceServer() {}

// UnsafeUploadServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UploadServiceServer will
// result in compilation errors.
type UnsafeUploadServiceServer interface {
	mustEmbedUnimplementedUploadServiceServer()
}

func RegisterUploadServiceServer(s grpc.ServiceRegistrar, srv UploadServiceServer) {
	s.RegisterService(&UploadService_ServiceDesc, srv)
}

func _UploadService_Upload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadServiceServer).Upload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UploadService_Upload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadServiceServer).Upload(ctx, req.(*UploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UploadService_ServiceDesc is the grpc.ServiceDesc for UploadService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UploadService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "master.UploadService",
	HandlerType: (*UploadServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Upload",
			Handler:    _UploadService_Upload_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gRPC/master.proto",
}

const (
	DataKeeperSuccessService_DataKeeperSuccess_FullMethodName = "/master.DataKeeperSuccessService/DataKeeperSuccess"
)

// DataKeeperSuccessServiceClient is the client API for DataKeeperSuccessService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataKeeperSuccessServiceClient interface {
	DataKeeperSuccess(ctx context.Context, in *DataKeeperSuccessRequest, opts ...grpc.CallOption) (*DataKeeperSuccessResponse, error)
}

type dataKeeperSuccessServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataKeeperSuccessServiceClient(cc grpc.ClientConnInterface) DataKeeperSuccessServiceClient {
	return &dataKeeperSuccessServiceClient{cc}
}

func (c *dataKeeperSuccessServiceClient) DataKeeperSuccess(ctx context.Context, in *DataKeeperSuccessRequest, opts ...grpc.CallOption) (*DataKeeperSuccessResponse, error) {
	out := new(DataKeeperSuccessResponse)
	err := c.cc.Invoke(ctx, DataKeeperSuccessService_DataKeeperSuccess_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataKeeperSuccessServiceServer is the server API for DataKeeperSuccessService service.
// All implementations must embed UnimplementedDataKeeperSuccessServiceServer
// for forward compatibility
type DataKeeperSuccessServiceServer interface {
	DataKeeperSuccess(context.Context, *DataKeeperSuccessRequest) (*DataKeeperSuccessResponse, error)
	mustEmbedUnimplementedDataKeeperSuccessServiceServer()
}

// UnimplementedDataKeeperSuccessServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDataKeeperSuccessServiceServer struct {
}

func (UnimplementedDataKeeperSuccessServiceServer) DataKeeperSuccess(context.Context, *DataKeeperSuccessRequest) (*DataKeeperSuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataKeeperSuccess not implemented")
}
func (UnimplementedDataKeeperSuccessServiceServer) mustEmbedUnimplementedDataKeeperSuccessServiceServer() {
}

// UnsafeDataKeeperSuccessServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataKeeperSuccessServiceServer will
// result in compilation errors.
type UnsafeDataKeeperSuccessServiceServer interface {
	mustEmbedUnimplementedDataKeeperSuccessServiceServer()
}

func RegisterDataKeeperSuccessServiceServer(s grpc.ServiceRegistrar, srv DataKeeperSuccessServiceServer) {
	s.RegisterService(&DataKeeperSuccessService_ServiceDesc, srv)
}

func _DataKeeperSuccessService_DataKeeperSuccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataKeeperSuccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataKeeperSuccessServiceServer).DataKeeperSuccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataKeeperSuccessService_DataKeeperSuccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataKeeperSuccessServiceServer).DataKeeperSuccess(ctx, req.(*DataKeeperSuccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataKeeperSuccessService_ServiceDesc is the grpc.ServiceDesc for DataKeeperSuccessService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataKeeperSuccessService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "master.DataKeeperSuccessService",
	HandlerType: (*DataKeeperSuccessServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DataKeeperSuccess",
			Handler:    _DataKeeperSuccessService_DataKeeperSuccess_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gRPC/master.proto",
}

const (
	DataKeeperConnectService_DataKeeperConnect_FullMethodName = "/master.DataKeeperConnectService/DataKeeperConnect"
)

// DataKeeperConnectServiceClient is the client API for DataKeeperConnectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataKeeperConnectServiceClient interface {
	DataKeeperConnect(ctx context.Context, in *DataKeeperConnectRequest, opts ...grpc.CallOption) (*DataKeeperConnectResponse, error)
}

type dataKeeperConnectServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataKeeperConnectServiceClient(cc grpc.ClientConnInterface) DataKeeperConnectServiceClient {
	return &dataKeeperConnectServiceClient{cc}
}

func (c *dataKeeperConnectServiceClient) DataKeeperConnect(ctx context.Context, in *DataKeeperConnectRequest, opts ...grpc.CallOption) (*DataKeeperConnectResponse, error) {
	out := new(DataKeeperConnectResponse)
	err := c.cc.Invoke(ctx, DataKeeperConnectService_DataKeeperConnect_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataKeeperConnectServiceServer is the server API for DataKeeperConnectService service.
// All implementations must embed UnimplementedDataKeeperConnectServiceServer
// for forward compatibility
type DataKeeperConnectServiceServer interface {
	DataKeeperConnect(context.Context, *DataKeeperConnectRequest) (*DataKeeperConnectResponse, error)
	mustEmbedUnimplementedDataKeeperConnectServiceServer()
}

// UnimplementedDataKeeperConnectServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDataKeeperConnectServiceServer struct {
}

func (UnimplementedDataKeeperConnectServiceServer) DataKeeperConnect(context.Context, *DataKeeperConnectRequest) (*DataKeeperConnectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataKeeperConnect not implemented")
}
func (UnimplementedDataKeeperConnectServiceServer) mustEmbedUnimplementedDataKeeperConnectServiceServer() {
}

// UnsafeDataKeeperConnectServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataKeeperConnectServiceServer will
// result in compilation errors.
type UnsafeDataKeeperConnectServiceServer interface {
	mustEmbedUnimplementedDataKeeperConnectServiceServer()
}

func RegisterDataKeeperConnectServiceServer(s grpc.ServiceRegistrar, srv DataKeeperConnectServiceServer) {
	s.RegisterService(&DataKeeperConnectService_ServiceDesc, srv)
}

func _DataKeeperConnectService_DataKeeperConnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataKeeperConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataKeeperConnectServiceServer).DataKeeperConnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataKeeperConnectService_DataKeeperConnect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataKeeperConnectServiceServer).DataKeeperConnect(ctx, req.(*DataKeeperConnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataKeeperConnectService_ServiceDesc is the grpc.ServiceDesc for DataKeeperConnectService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataKeeperConnectService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "master.DataKeeperConnectService",
	HandlerType: (*DataKeeperConnectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DataKeeperConnect",
			Handler:    _DataKeeperConnectService_DataKeeperConnect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gRPC/master.proto",
}

const (
	DataKeeperReplicateService_DataKeeperReplicate_FullMethodName = "/master.DataKeeperReplicateService/DataKeeperReplicate"
)

// DataKeeperReplicateServiceClient is the client API for DataKeeperReplicateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataKeeperReplicateServiceClient interface {
	DataKeeperReplicate(ctx context.Context, in *DataKeeperReplicateRequest, opts ...grpc.CallOption) (*DataKeeperReplicateResponse, error)
}

type dataKeeperReplicateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataKeeperReplicateServiceClient(cc grpc.ClientConnInterface) DataKeeperReplicateServiceClient {
	return &dataKeeperReplicateServiceClient{cc}
}

func (c *dataKeeperReplicateServiceClient) DataKeeperReplicate(ctx context.Context, in *DataKeeperReplicateRequest, opts ...grpc.CallOption) (*DataKeeperReplicateResponse, error) {
	out := new(DataKeeperReplicateResponse)
	err := c.cc.Invoke(ctx, DataKeeperReplicateService_DataKeeperReplicate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataKeeperReplicateServiceServer is the server API for DataKeeperReplicateService service.
// All implementations must embed UnimplementedDataKeeperReplicateServiceServer
// for forward compatibility
type DataKeeperReplicateServiceServer interface {
	DataKeeperReplicate(context.Context, *DataKeeperReplicateRequest) (*DataKeeperReplicateResponse, error)
	mustEmbedUnimplementedDataKeeperReplicateServiceServer()
}

// UnimplementedDataKeeperReplicateServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDataKeeperReplicateServiceServer struct {
}

func (UnimplementedDataKeeperReplicateServiceServer) DataKeeperReplicate(context.Context, *DataKeeperReplicateRequest) (*DataKeeperReplicateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataKeeperReplicate not implemented")
}
func (UnimplementedDataKeeperReplicateServiceServer) mustEmbedUnimplementedDataKeeperReplicateServiceServer() {
}

// UnsafeDataKeeperReplicateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataKeeperReplicateServiceServer will
// result in compilation errors.
type UnsafeDataKeeperReplicateServiceServer interface {
	mustEmbedUnimplementedDataKeeperReplicateServiceServer()
}

func RegisterDataKeeperReplicateServiceServer(s grpc.ServiceRegistrar, srv DataKeeperReplicateServiceServer) {
	s.RegisterService(&DataKeeperReplicateService_ServiceDesc, srv)
}

func _DataKeeperReplicateService_DataKeeperReplicate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataKeeperReplicateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataKeeperReplicateServiceServer).DataKeeperReplicate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataKeeperReplicateService_DataKeeperReplicate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataKeeperReplicateServiceServer).DataKeeperReplicate(ctx, req.(*DataKeeperReplicateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataKeeperReplicateService_ServiceDesc is the grpc.ServiceDesc for DataKeeperReplicateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataKeeperReplicateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "master.DataKeeperReplicateService",
	HandlerType: (*DataKeeperReplicateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DataKeeperReplicate",
			Handler:    _DataKeeperReplicateService_DataKeeperReplicate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gRPC/master.proto",
}
